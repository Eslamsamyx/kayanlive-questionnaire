// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? @db.Text
    access_token             String? @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
    USER
    ADMIN
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    role          UserRole  @default(USER)
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// Questionnaire models
model QuestionnaireSubmission {
    id              String            @id @default(cuid())
    questionnaireId String            // "project-brief"
    createdAt       DateTime          @default(now())
    updatedAt       DateTime          @updatedAt
    submittedAt     DateTime?         // When fully submitted
    isComplete      Boolean           @default(false)

    // Company/Client information for easy access
    companyName     String?
    contactPerson   String?
    email           String?
    industry        String?

    answers         SubmissionAnswer[]
    uploadedFiles   UploadedFile[]

    @@index([questionnaireId])
    @@index([createdAt])
    @@index([isComplete])
}

model SubmissionAnswer {
    id           String    @id @default(cuid())
    submissionId String
    questionId   Int
    questionType String    // text, select, checkbox, etc.
    section      String    // Client Details, Event Details, etc.

    // Store answers in JSON format to handle different types
    textValue    String?   @db.Text
    jsonValue    Json?     // For complex answers like multi-field, matrix, checkbox arrays

    submission   QuestionnaireSubmission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

    @@unique([submissionId, questionId])
    @@index([questionId])
    @@index([section])
}

model UploadedFile {
    id           String   @id @default(cuid())
    submissionId String
    questionId   Int
    fileName     String
    originalName String
    fileSize     Int
    mimeType     String
    filePath     String   // Local file path or cloud storage URL
    uploadedAt   DateTime @default(now())

    submission   QuestionnaireSubmission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

    @@index([submissionId])
    @@index([questionId])
}
